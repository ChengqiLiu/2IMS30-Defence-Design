/***************************************************************************//**
 * @file
 * @brief Object Transfer Service instances' autogenerated implementation
 *******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/
#include "sl_component_catalog.h"
#include "sl_bt_ots_server_instances.h"
#include "gatt_db.h"
#include "app_queue.h"
#include "gatt_db.h"
#include "sl_bt_ots_server.h"

{% for inst in ots_server_instance -%}
#include "sl_bt_ots_server_{{ inst }}_config.h"
{% endfor %}

{% for inst in ots_server_instance | sort %}
// GATT handles for Object Server  instance {{ inst }}
sl_bt_ots_gattdb_handles_t sl_bt_ots_server_gatt_{{ inst | lower }} = {
  gattdb_ots_{{ inst | lower }},                             // GATT database handle for Object Transfer Service
  {
    {
      gattdb_ots_{{ inst | lower }}_ots_feature,                 // GATT database handle for OTS Features characteristic
      gattdb_ots_{{ inst | lower }}_object_name,                 // GATT database handle for Object Name characteristic
      gattdb_ots_{{ inst | lower }}_object_type,                 // GATT database handle for Object Type characteristic
      gattdb_ots_{{ inst | lower }}_object_size,                 // GATT database handle for Object Size characteristic
      gattdb_ots_{{ inst | lower }}_object_first_created,        // GATT database handle for Object First Created characteristic
      gattdb_ots_{{ inst | lower }}_object_last_modified,        // GATT database handle for Object Last Modified characteristic
      gattdb_ots_{{ inst | lower }}_object_id,                   // GATT database handle for Object ID characteristic
      gattdb_ots_{{ inst | lower }}_object_properties,           // GATT database handle for Object Properties characteristic
      gattdb_ots_{{ inst | lower }}_object_action_control_point, // GATT database handle for OACP characteristic
      gattdb_ots_{{ inst | lower }}_object_list_control_point,   // GATT database handle for OLCP characteristic
      gattdb_ots_{{ inst | lower }}_object_list_filter,          // GATT database handle for Object List Filter characteristic
      gattdb_ots_{{ inst | lower }}_object_changed               // GATT database handle for Object Changed characteristic
    }
  }
};

 // Client database for Object Server instance {{ inst }}
sl_bt_ots_server_client_db_entry_t client_db_{{ inst | lower }}[SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_MAX_CONCURRENCY];

// GATT capablity initialization for Object Server instance {{ inst }}
static void ots_server_instance_{{ inst | lower }}_enable_capabilities(void)
{
  uint32_t capabilities = 0;
  if (sl_bt_ots_server_instance_{{ inst | lower }}.capabilities.capability_multiple_objects) {
      capabilities |= ots_{{ inst | lower }}_capability_support_multiple_objects;
      if (sl_bt_ots_server_instance_{{ inst | lower }}.capabilities.capability_object_list_filter) {
        capabilities |= ots_{{ inst | lower }}_capability_support_object_list_filter;
      }
  }
  if (sl_bt_ots_server_instance_{{ inst | lower }}.capabilities.capability_time) {
    if (sl_bt_ots_server_instance_{{ inst | lower }}.capabilities.capability_first_created) {
      capabilities |= ots_{{ inst | lower }}_capability_support_object_first_created;
    }
    if (sl_bt_ots_server_instance_{{ inst | lower }}.capabilities.capability_last_modified) {
      capabilities |= ots_{{ inst | lower }}_capability_support_object_last_modified;
    }
  }
  if (sl_bt_ots_server_instance_{{ inst | lower }}.capabilities.capability_object_changed) {
    capabilities |= ots_{{ inst | lower }}_capability_support_object_changed;
  }
  sl_bt_gatt_server_enable_capabilities(capabilities);
}

 // Object Server instance {{ inst }}
sl_bt_ots_server_t sl_bt_ots_server_instance_{{ inst | lower }} = {
  .gattdb_handles = (sl_bt_ots_gattdb_handles_t *)&sl_bt_ots_server_gatt_{{ inst | lower }},
  .callbacks = (sl_bt_ots_server_callbacks_t *)NULL,
  .concurrency = SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_MAX_CONCURRENCY,
  .features = { SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_OTS_FEATURE_OACP,
                SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_OTS_FEATURE_OLCP },
  .client_db = (sl_bt_ots_server_client_db_entry_t *)client_db_{{ inst | lower }},
  .capabilities = { SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_MULTIPLE_OBJECTS,
                    SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_OBJECT_LIST_FILTER_SUPPORT,
                    SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_DLO_SUPPORT,
                    SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_TIME_SUPPORT,
                    SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_TIME_FIRST_CREATED_SUPPORT,
                    SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_TIME_LAST_MODIFIED_SUPPORT,
                    SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_OBJECT_CHANGED_SUPPORT },
  .capability_init = ots_server_instance_{{ inst | lower }}_enable_capabilities
};

{%- endfor %}

// Table of Object Server instances
const sl_bt_ots_server_t *sl_bt_ots_server_instances[] = {
{%- for inst in ots_server_instance | sort %}
  &sl_bt_ots_server_instance_{{ inst | lower }}{% if not loop.last %}, {% endif %}
{%- endfor %}
};

// Number of Object Server instances
const uint8_t ots_server_count = {{ ots_server_instance | length }};

{%- for inst in ots_server_instance | sort %}
static uint8_t indication_queue_data_{{ inst | lower }}[SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_MAX_CONCURRENCY][(SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_INDICATION_QUEUE_SIZE * SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_INDICATION_SIZE_MAX)];
{%- endfor %}

// Initializer for OTS instances
void sli_bt_ots_server_instances_init(void)
{
{%- for inst in ots_server_instance | sort %}
  // Initialize Object Server instance {{ inst }}
  for (uint8_t i = 0; i < SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_MAX_CONCURRENCY ; i++) {
    app_queue_init(&sl_bt_ots_server_instance_{{ inst | lower }}.client_db[i].indication_queue, 
                   SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_INDICATION_QUEUE_SIZE, 
                   SL_BT_OTS_SERVER_{{ inst | upper }}_CONFIG_INDICATION_SIZE_MAX, 
                   indication_queue_data_{{ inst | lower }}[i]);
  }
{%- endfor %}
}