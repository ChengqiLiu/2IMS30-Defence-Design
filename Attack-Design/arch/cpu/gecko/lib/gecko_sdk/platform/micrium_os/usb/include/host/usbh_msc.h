/***************************************************************************//**
 * @file
 * @brief USB Host - Mass Storage Class (MSC)
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc.  Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement.
 * The software is governed by the sections of the MSLA applicable to Micrium
 * Software.
 *
 ******************************************************************************/

/****************************************************************************************************//**
 * @defgroup USBH_MSC USB Host MSC API
 * @ingroup USBH
 * @brief   USB Host MSC API
 *
 * @addtogroup USBH_MSC
 * @{
 *******************************************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                               MODULE
 ********************************************************************************************************
 *******************************************************************************************************/

#ifndef  _USBH_MSC_H_
#define  _USBH_MSC_H_

/********************************************************************************************************
 ********************************************************************************************************
 *                                               INCLUDE FILES
 ********************************************************************************************************
 *******************************************************************************************************/

#include  <cpu/include/cpu.h>
#include  <common/include/kal.h>
#include  <common/include/lib_def.h>
#include  <common/include/lib_mem.h>
#include  <common/include/rtos_err.h>
#include  <common/include/rtos_path.h>
#include  <usbh_cfg.h>

#include  <usb/include/host/usbh_class.h>
#include  <usb/include/host/usbh_core_utils.h>
#include  <usb/include/host/usbh_core_opt_def.h>
#include  <usb/include/host/usbh_core_handle.h>

/********************************************************************************************************
 ********************************************************************************************************
 *                                               DEFINES
 ********************************************************************************************************
 *******************************************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                               DATA TYPES
 ********************************************************************************************************
 *******************************************************************************************************/

/****************************************************************************************************//**
 *                                       MSC CONFIGURATION STRUCTURES
 * @{
 *******************************************************************************************************/

typedef struct usbh_msc_cfg_optimize_spd {                      // --------------- MSC OPTIMIZE SPD CFG ---------------
  CPU_INT08U FnctQty;                                           ///< Quantity of msc functions.
} USBH_MSC_CFG_OPTIMIZE_SPD;

typedef struct usbh_msc_cfg_init_alloc {                        // ---------------- MSC INIT ALLOC CFG ----------------
  CPU_INT08U FnctQty;                                           ///< Quantity of msc functions.
  CPU_INT08U RespBufQty;                                        ///< Quantity of resp buf.
} USBH_MSC_CFG_INIT_ALLOC;

typedef struct usbh_msc_init_cfg {                              // ------------- MSC INIT CONFIGURATIONS --------------
  CPU_SIZE_T                BufAlignOctets;                     ///< Indicates desired mem alignment for internal buf.
  MEM_SEG                   *MemSegPtr;                         ///< Ptr to mem segment to use when allocating ctrl data.
  MEM_SEG                   *MemSegBufPtr;                      ///< Ptr to mem segment to use when allocating data buf.

#if (USBH_CFG_OPTIMIZE_SPD_EN == DEF_ENABLED)
  USBH_MSC_CFG_OPTIMIZE_SPD OptimizeSpd;                        ///< Configurations for optimize speed mode.
#endif

#if (USBH_CFG_INIT_ALLOC_EN == DEF_ENABLED)
  USBH_MSC_CFG_INIT_ALLOC InitAlloc;                            ///< Configurations for allocations at init mode.
#endif
} USBH_MSC_INIT_CFG;

///< @}

/********************************************************************************************************
 *                               MSC COMMAND BLOCK NOTIFICATION FUNCTIONS
 *******************************************************************************************************/

typedef struct usbh_msc_cmd_blk_fncts {
  //                                                               Indicates logical unit has been connected.
  void (*Conn)(CPU_INT08U lun,
               CPU_INT16U dev_id,
               void       *p_transport_api,
               void       *p_transport_arg);
  //                                                               Indicates logical unit has been disconnected.
  void (*Disconn)(CPU_INT08U lun,
                  CPU_INT16U dev_id,
                  void       *p_transport_arg);
  //                                                               Get max resp buf len used by Cmd Blk layer.
  CPU_INT16U (*MaxRespBufLenGet)(void);
} USBH_MSC_CMD_BLK_FNCTS;

/********************************************************************************************************
 ********************************************************************************************************
 *                                           GLOBAL CONSTANTS
 ********************************************************************************************************
 *******************************************************************************************************/

extern const USBH_MSC_INIT_CFG USBH_MSC_InitCfgDflt;            // USBH MSC class dflt configurations.

/********************************************************************************************************
 ********************************************************************************************************
 *                                               GLOBAL VARIABLES
 ********************************************************************************************************
 *******************************************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                                   MACROS
 ********************************************************************************************************
 *******************************************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                           FUNCTION PROTOTYPES
 ********************************************************************************************************
 *******************************************************************************************************/

/********************************************************************************************************
 *                                   CONFIGURATION OVERRIDE FUNCTIONS
 *******************************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#if (RTOS_CFG_EXTERNALIZE_OPTIONAL_CFG_EN == DEF_DISABLED)
void USBH_MSC_ConfigureBufAlignOctets(CPU_SIZE_T buf_align_octets);

void USBH_MSC_ConfigureMemSeg(MEM_SEG *p_mem_seg,
                              MEM_SEG *p_mem_seg_buf);

#if (USBH_CFG_OPTIMIZE_SPD_EN == DEF_ENABLED)
void USBH_MSC_ConfigureOptimizeSpdCfg(const USBH_MSC_CFG_OPTIMIZE_SPD *p_optimize_spd_cfg);
#endif

#if (USBH_CFG_INIT_ALLOC_EN == DEF_ENABLED)
void USBH_MSC_ConfigureInitAllocCfg(const USBH_MSC_CFG_INIT_ALLOC *p_init_alloc_cfg);
#endif
#endif

/********************************************************************************************************
 *                                               MSC FUNCTIONS
 *******************************************************************************************************/

void USBH_MSC_Init(const USBH_MSC_CMD_BLK_FNCTS *p_cmd_blk_fncts,
                   RTOS_ERR                     *p_err);

void USBH_MSC_StdReqTimeoutSet(CPU_INT32U std_req_timeout_ms,
                               RTOS_ERR   *p_err);

#ifdef __cplusplus
}
#endif

/********************************************************************************************************
 ********************************************************************************************************
 *                                           CONFIGURATION ERRORS
 ********************************************************************************************************
 *******************************************************************************************************/

/****************************************************************************************************//**
 ********************************************************************************************************
 * @}                                            MODULE END
 ********************************************************************************************************
 *******************************************************************************************************/

#endif
