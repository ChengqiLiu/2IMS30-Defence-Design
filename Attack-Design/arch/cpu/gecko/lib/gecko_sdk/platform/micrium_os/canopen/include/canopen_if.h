/***************************************************************************//**
 * @file
 * @brief CANopen CAN Interface Abstraction
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc.  Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement.
 * The software is governed by the sections of the MSLA applicable to Micrium
 * Software.
 *
 ******************************************************************************/

/****************************************************************************************************//**
 * @addtogroup CANOPEN_CORE
 * @{
 *******************************************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                               MODULE
 ********************************************************************************************************
 *******************************************************************************************************/

#ifndef _CANOPEN_IF_H_
#define _CANOPEN_IF_H_

/********************************************************************************************************
 ********************************************************************************************************
 *                                             INCLUDES
 ********************************************************************************************************
 *******************************************************************************************************/

#include  <cpu/include/cpu.h>
#include  <common/include/rtos_err.h>

/********************************************************************************************************
 ********************************************************************************************************
 *                                              MACROS
 ********************************************************************************************************
 *******************************************************************************************************/

#define CANOPEN_FRM_GET_COB_ID(f)       ((CPU_INT32U)(f)->MsgId)

#define CANOPEN_FRM_SET_COB_ID(f, n)     ((f)->MsgId = (CPU_INT32U)(n))

#define CANOPEN_FRM_GET_DLC(f)          ((CPU_INT08U)(f)->DLC)

#define CANOPEN_FRM_SET_DLC(f, n)        ((f)->DLC = (CPU_INT08U)(n))

#define CANOPEN_FRM_GET_BYTE(f, p)       (CPU_INT08U)((CPU_INT08U)(f)->Data[(p) & 0x7])

#define CANOPEN_FRM_GET_WORD(f, p)                     \
  (CPU_INT16U)(                                        \
    (((CPU_INT16U)((f)->Data[((p) + 1) & 0x7]) ) << 8) \
    | (((CPU_INT16U)((f)->Data[((p) ) & 0x7])))        \
    )

#define CANOPEN_FRM_GET_LONG(f, p)                       \
  (CPU_INT32U)(                                          \
    (((CPU_INT32U)((f)->Data[((p) + 3) & 0x7])) << 24)   \
    | (((CPU_INT32U)((f)->Data[((p) + 2) & 0x7])) << 16) \
    | (((CPU_INT32U)((f)->Data[((p) + 1) & 0x7])) <<  8) \
    | (((CPU_INT32U)((f)->Data[((p)) & 0x7])))           \
    )

#define CANOPEN_FRM_SET_BYTE(f, n, p)       \
  {                                         \
    (f)->Data[(p) & 0x7] = (CPU_INT08U)(n); \
  }

#define CANOPEN_FRM_SET_WORD(f, n, p)                                  \
  {                                                                    \
    (f)->Data[(p) & 0x7] = (CPU_INT08U)((CPU_INT16U)(n));              \
    (f)->Data[((p) + 1) & 0x7] = (CPU_INT08U)(((CPU_INT16U)(n)) >> 8); \
  }

#define CANOPEN_FRM_SET_LONG(f, n, p)                                   \
  {                                                                     \
    (f)->Data[(p) & 0x7] = (CPU_INT08U)((CPU_INT32U)(n));               \
    (f)->Data[((p) + 1) & 0x7] = (CPU_INT08U)(((CPU_INT32U)(n)) >> 8);  \
    (f)->Data[((p) + 2) & 0x7] = (CPU_INT08U)(((CPU_INT32U)(n)) >> 16); \
    (f)->Data[((p) + 3) & 0x7] = (CPU_INT08U)(((CPU_INT32U)(n)) >> 24); \
  }

/********************************************************************************************************
 ********************************************************************************************************
 *                                             DATA TYPES
 ********************************************************************************************************
 *******************************************************************************************************/

/****************************************************************************************************//**
 *                                         CANopen message frame
 *
 * @brief   This structure represents a CAN frame.
 *
 * @note    This type definition ensures the independence of the stack from interface
 *          driver definitions.
 *******************************************************************************************************/

typedef struct canopen_if_frm {
  CPU_INT32U MsgId;                                             ///< CAN message identifier.
  CPU_INT08U Data[8];                                           ///< CAN message Data (payload).
  CPU_INT08U DLC;                                               ///< CAN message data length code (DLC).
  CPU_INT08U MsgNbr;                                            ///< CAN message number.
} CANOPEN_IF_FRM;

/****************************************************************************************************//**
 ********************************************************************************************************
 * @}                                            MODULE END
 ********************************************************************************************************
 *******************************************************************************************************/

#endif // _CANOPEN_IF_H_
