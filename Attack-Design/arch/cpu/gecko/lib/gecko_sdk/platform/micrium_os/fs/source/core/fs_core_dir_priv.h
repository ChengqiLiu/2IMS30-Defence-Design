/***************************************************************************//**
 * @file
 * @brief File System - Core Directory Operations
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc.  Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement.
 * The software is governed by the sections of the MSLA applicable to Micrium
 * Software.
 *
 ******************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                               MODULE
 ********************************************************************************************************
 *******************************************************************************************************/

#ifndef  FS_CORE_DIR_PRIV_H_
#define  FS_CORE_DIR_PRIV_H_

/********************************************************************************************************
 ********************************************************************************************************
 *                                           INCLUDE FILES
 ********************************************************************************************************
 *******************************************************************************************************/
//                                                                 ------------------------ FS ------------------------
#include  <fs_core_cfg.h>

#if (FS_CORE_CFG_DIR_EN == DEF_ENABLED)
#include  <fs/include/fs_core_dir.h>
#include  <fs/source/sys/fs_sys_priv.h>
#include  <fs/source/core/fs_core_entry_priv.h>

//                                                                 ----------------------- EXT ------------------------
#include  <cpu/include/cpu.h>
#include  <common/include/rtos_err.h>

/********************************************************************************************************
 ********************************************************************************************************
 *                                               DATA TYPES
 ********************************************************************************************************
 *******************************************************************************************************/

//                                                                 Directory node.
typedef struct fs_dir_node {
  FS_ENTRY_NODE_FIELDS
} FS_DIR_NODE;

//                                                                 Directory descriptor.
typedef struct fs_dir_desc {
  FS_ENTRY_DESC_FIELDS(FS_DIR_NODE  * DirNodePtr)
  FS_SYS_POS CurPosData;
#if (FS_CORE_CFG_CTR_STAT_EN == DEF_ENABLED)
  FS_CTR StatRdEntryCtr;
#endif
} FS_DIR_DESC;

/********************************************************************************************************
 ********************************************************************************************************
 *                                               MACRO'S
 *
 * Note(s): (1) The browsing operation is thread safe: directories may concurrently be opened / closed from
 *               other tasks.
 ********************************************************************************************************
 *******************************************************************************************************/

//                                                                 Iterate through opened directories (see Note #1).
#define  FS_DIR_FOR_EACH(cur_dir_handle)          FS_OBJ_FOR_EACH(cur_dir_handle, FSDir, FS_DIR)

/********************************************************************************************************
 ********************************************************************************************************
 *                                           FUNCTION PROTOTYPES
 ********************************************************************************************************
 *******************************************************************************************************/

void FSDir_ModuleInit(RTOS_ERR *p_err);

FS_DIR_HANDLE FSDir_FirstAcquire(void);

FS_DIR_HANDLE FSDir_NextAcquire(FS_DIR_HANDLE dir_handle);

void FSDir_Release(FS_DIR_HANDLE dir_handle);

/********************************************************************************************************
 ********************************************************************************************************
 *                                       CONFIGURATION ERRORS
 ********************************************************************************************************
 *******************************************************************************************************/

#ifndef  FS_CORE_CFG_DIR_EN
#error  "FS_CORE_CFG_DIR_EN not #define'd in 'fs_core_cfg.h'. MUST be DEF_ENABLED or DEF_DISABLED."
#elif  ((FS_CORE_CFG_DIR_EN != DEF_DISABLED) \
  && (FS_CORE_CFG_DIR_EN != DEF_ENABLED))
#error  "FS_CORE_CFG_DIR_EN illegally #define'd in 'fs_core_cfg.h'. MUST be DEF_ENABLED or DEF_DISABLED."
#endif

#endif

/********************************************************************************************************
 ********************************************************************************************************
 *                                               MODULE END
 ********************************************************************************************************
 *******************************************************************************************************/

#endif
