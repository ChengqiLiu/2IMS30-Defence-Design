/***************************************************************************//**
 * @file
 * @brief File System - Fat Operations
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc.  Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement.
 * The software is governed by the sections of the MSLA applicable to Micrium
 * Software.
 *
 ******************************************************************************/

/****************************************************************************************************//**
 * @addtogroup FS_CORE
 * @{
 *******************************************************************************************************/

/********************************************************************************************************
 ********************************************************************************************************
 *                                               MODULE
 ********************************************************************************************************
 *******************************************************************************************************/

#ifndef  FS_FAT_H_
#define  FS_FAT_H_

/********************************************************************************************************
 ********************************************************************************************************
 *                                           INCLUDE FILES
 ********************************************************************************************************
 *******************************************************************************************************/

#include  <cpu/include/cpu.h>
#include  <fs/include/fs_core.h>
#include  <fs/include/fs_core_vol.h>
#include  <fs/include/fs_blk_dev.h>

/********************************************************************************************************
 ********************************************************************************************************
 *                                           DATA TYPES
 ********************************************************************************************************
 *******************************************************************************************************/

/********************************************************************************************************
 *                                      FAT VOLUME CONFIGURATION
 *******************************************************************************************************/

typedef struct fs_fat_vol_cfg {
  CPU_SIZE_T ClusSizeInSec;                                     /**< Number of sectors per cluster.                     */
  CPU_SIZE_T RsvdAreaSizeInSec;                                 /**< Number of reserved sectors.                        */
  CPU_INT16U RootDirEntryCnt;                                   /**< Number of 32-bit entries in root directory.        */
  CPU_INT08U FAT_Type;                                          /**< Type of FAT: FAT12, FAT16 or FAT32.                */
  CPU_INT08U NbrFATs;                                           /**< Number of FAT tables.                              */
} FS_FAT_VOL_CFG;

/********************************************************************************************************
 ********************************************************************************************************
 *                                               DEFINES
 ********************************************************************************************************
 *******************************************************************************************************/

//                                                                 When modifying volume options, always make sure that
//                                                                 sys-specific options do not clash with core options.
#define  FS_FAT_VOL_OPT_JOURNAL_DISABLED                    DEF_BIT_04

#define  FS_FAT_DFLT_RSVD_SEC_CNT_FAT12                    1u
#define  FS_FAT_DFLT_RSVD_SEC_CNT_FAT16                    1u
#define  FS_FAT_DFLT_RSVD_SEC_CNT_FAT32                   32u

#define  FS_FAT_DFLT_ROOT_ENT_CNT_FAT12                  512u
#define  FS_FAT_DFLT_ROOT_ENT_CNT_FAT16                  512u
#define  FS_FAT_DFLT_ROOT_ENT_CNT_FAT32                    0u

#define  FS_FAT_TYPE_FAT12                                 0u
#define  FS_FAT_TYPE_FAT16                                 1u
#define  FS_FAT_TYPE_FAT32                                 2u
#define  FS_FAT_TYPE_UNKNOWN                               3u

#define  FS_FAT_DFLT_NBR_FATS_FAT12                        2u
#define  FS_FAT_DFLT_NBR_FATS_FAT16                        2u
#define  FS_FAT_DFLT_NBR_FATS_FAT32                        2u

#define  FS_FAT_FAT12_ENTRY_SIZE_BITS                      12u
#define  FS_FAT_FAT16_ENTRY_SIZE_BITS                      16u
#define  FS_FAT_FAT32_ENTRY_SIZE_BITS                      32u

/********************************************************************************************************
 ********************************************************************************************************
 *                                       FUNCTION PROTOTYPES
 ********************************************************************************************************
 *******************************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#if (FS_CORE_CFG_RD_ONLY_EN == DEF_DISABLED)
void FS_FAT_Fmt(FS_BLK_DEV_HANDLE blk_dev_handle,
                FS_PARTITION_NBR  partition_nbr,
                FS_FAT_VOL_CFG    *p_fat_vol_cfg,
                RTOS_ERR          *p_err);
#endif

#ifdef __cplusplus
}
#endif

/****************************************************************************************************//**
 ********************************************************************************************************
 * @}                                        MODULE END
 ********************************************************************************************************
 *******************************************************************************************************/

#endif
